#!/usr/bin/env python3
"""
BDD Test Runner for ib-stream system
Runs Gherkin feature files using pytest-bdd.
"""

import logging
import os
import sys
from datetime import datetime
from pathlib import Path

import pytest
from pytest_bdd import scenarios

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Add the tests directory to Python path to enable imports
tests_dir = Path(__file__).parent
sys.path.insert(0, str(tests_dir))

# Import step definitions to register them with pytest-bdd
from step_definitions import basic_steps, contract_steps

# Load all feature files as scenarios using relative paths from this file
# Load basic functionality scenarios
scenarios("features/basic_functionality.feature")

# Load contract lookup scenarios  
scenarios("features/contract_lookup.feature")

def run_bdd_tests(feature_filter=None, verbose=True):
    """
    Run BDD tests with optional feature filtering.
    
    Args:
        feature_filter: Optional string to filter which features to run
        verbose: Whether to run with verbose output
    
    Returns:
        Exit code from pytest
    """
    logger.info("=" * 70)
    logger.info("RUNNING IB-STREAM BDD TESTS")
    logger.info("=" * 70)
    logger.info(f"Test started at: {datetime.now().isoformat()}")
    logger.info(f"Feature directory: {feature_dir}")
    
    # Build pytest arguments
    args = [__file__]
    
    if verbose:
        args.extend(["-v", "-s"])
    
    args.extend(["--tb=short"])
    
    # Add feature filter if specified
    if feature_filter:
        args.extend(["-k", feature_filter])
        logger.info(f"Running tests matching filter: {feature_filter}")
    
    # Add markers for different test types
    args.extend(["-m", "not slow"])  # Skip slow tests by default
    
    logger.info(f"Running pytest with args: {' '.join(args)}")
    logger.info("")
    
    # Run the tests
    exit_code = pytest.main(args)
    
    logger.info("")
    logger.info("=" * 70)
    logger.info("BDD TESTS COMPLETED")
    logger.info("=" * 70)
    
    if exit_code == 0:
        logger.info("✓ All BDD tests passed successfully!")
    else:
        logger.error(f"✗ BDD tests failed with exit code: {exit_code}")
    
    return exit_code

# Individual test classes for better organization
class TestBasicFunctionality:
    """Test class for basic functionality scenarios"""
    pass

class TestContractLookup:
    """Test class for contract lookup scenarios"""
    pass

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Run ib-stream BDD tests")
    parser.add_argument("--filter", "-f", help="Filter tests by feature name or scenario")
    parser.add_argument("--quiet", "-q", action="store_true", help="Run with minimal output")
    parser.add_argument("--basic-only", action="store_true", help="Run only basic functionality tests")
    parser.add_argument("--contracts-only", action="store_true", help="Run only contract lookup tests")
    
    args = parser.parse_args()
    
    # Determine feature filter
    feature_filter = args.filter
    if args.basic_only:
        feature_filter = "basic_functionality"
    elif args.contracts_only:
        feature_filter = "contract_lookup"
    
    verbose = not args.quiet
    
    exit_code = run_bdd_tests(feature_filter=feature_filter, verbose=verbose)
    sys.exit(exit_code)